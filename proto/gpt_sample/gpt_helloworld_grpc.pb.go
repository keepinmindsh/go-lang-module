// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/gpt_sample/gpt_helloworld.proto

package gpt_sample

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GPT3Client is the client API for GPT3 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GPT3Client interface {
	GenerateText(ctx context.Context, in *GPT3Request, opts ...grpc.CallOption) (*GPT3Response, error)
}

type gPT3Client struct {
	cc grpc.ClientConnInterface
}

func NewGPT3Client(cc grpc.ClientConnInterface) GPT3Client {
	return &gPT3Client{cc}
}

func (c *gPT3Client) GenerateText(ctx context.Context, in *GPT3Request, opts ...grpc.CallOption) (*GPT3Response, error) {
	out := new(GPT3Response)
	err := c.cc.Invoke(ctx, "/openai.GPT3/GenerateText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GPT3Server is the server API for GPT3 service.
// All implementations must embed UnimplementedGPT3Server
// for forward compatibility
type GPT3Server interface {
	GenerateText(context.Context, *GPT3Request) (*GPT3Response, error)
	mustEmbedUnimplementedGPT3Server()
}

// UnimplementedGPT3Server must be embedded to have forward compatible implementations.
type UnimplementedGPT3Server struct {
}

func (UnimplementedGPT3Server) GenerateText(context.Context, *GPT3Request) (*GPT3Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateText not implemented")
}
func (UnimplementedGPT3Server) mustEmbedUnimplementedGPT3Server() {}

// UnsafeGPT3Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GPT3Server will
// result in compilation errors.
type UnsafeGPT3Server interface {
	mustEmbedUnimplementedGPT3Server()
}

func RegisterGPT3Server(s grpc.ServiceRegistrar, srv GPT3Server) {
	s.RegisterService(&GPT3_ServiceDesc, srv)
}

func _GPT3_GenerateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPT3Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPT3Server).GenerateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openai.GPT3/GenerateText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPT3Server).GenerateText(ctx, req.(*GPT3Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GPT3_ServiceDesc is the grpc.ServiceDesc for GPT3 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GPT3_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openai.GPT3",
	HandlerType: (*GPT3Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateText",
			Handler:    _GPT3_GenerateText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gpt_sample/gpt_helloworld.proto",
}
